
for i in range(10):

    n = int(input(
        "Enter the your choice 1. create a linked list and inserting element, 2. Search the element, 3. sort the element,4.reverse the linked list, 5.delete from the linked list 6.exit  "))
    if n == 1:
        class Node:
            def __init__(self, data):
                self.data = data
                self.next = None


        class LinkedList:
            def __init__(self):
                self.head = None
                self.last_node = None

            def append(self, data):
                if self.last_node is None:
                    self.head = Node(data)
                    self.last_node = self.head
                else:
                    self.last_node.next = Node(data)
                    self.last_node = self.last_node.next

            def display(self):
                current = self.head
                while current is not None:
                    print(current.data, end=' ')
                    current = current.next


        a_llist = LinkedList()
        n = int(input('How many elements would you like to add? '))
        for i in range(n):
            data = int(input('Enter data item: '))
            a_llist.append(data)
        print('The linked list: ', end='')
        a_llist.display()
    if n == 2:
        class Node:
            # Singly linked node
            def __init__(self, data=None):
                self.data = data
                self.next = None


        class singly_linked_list:
            def __init__(self):
                # Createe an empty list
                self.tail = None
                self.head = None
                self.count = 0

            def append_item(self, data):
                # Append items on the list
                node = Node(data)
                if self.head:
                    self.head.next = node
                    self.head = node
                else:
                    self.tail = node
                    self.head = node
                self.count += 1

            def iterate_item(self):
                # Iterate the list.
                current_item = self.tail
                while current_item:
                    val = current_item.data
                    current_item = current_item.next
                    yield val

            def search_item(self, val):
                # Search the list
                for node in self.iterate_item():
                    if val == node:
                        return True
                return False

            def display(self):
                current = self.head
                while current is not None:
                    print(current.data, end=' ')
                    current = current.next


        a_llist = singly_linked_list()
        n = int(input('How many elements would you like to add? '))
        k = int(input('Element u want to search for'))
        for i in range(n):
            data = int(input('Enter data item: '))
            a_llist.append_item(data)
        print('The linked list: ', end='')
        a_llist.display()
        if a_llist.search_item(k):
            print("True")
        else:
            print("False")
    if n == 3:
        class Node:
            def __init__(self, data):
                self.data = data
                self.next = None


        class SortList:

            def __init__(self):
                self.head = None
                self.tail = None

            def addNode(self, data):
                # Create a new node
                newNode = Node(data)

                # Checks if the list is empty
                if (self.head == None):
                    # If list is empty, both head and tail will point to new node
                    self.head = newNode
                    self.tail = newNode
                else:

                    self.tail.next = newNode

                    self.tail = newNode

            def sortList(self):

                current = self.head
                index = None

                if (self.head == None):
                    return
                else:
                    while (current != None):

                        index = current.next
                        while (index != None):

                            if (current.data > index.data):
                                temp = current.data
                                current.data = index.data
                                index.data = temp
                            index = index.next
                        current = current.next

            def display(self):
                # Node current will point to head
                current = self.head
                if (self.head == None):
                    print("List is empty")
                    return
                while (current != None):
                    # Prints each node by incrementing pointer
                    print(current.data),
                    current = current.next


        sList = SortList()

        sList.addNode(9)
        sList.addNode(7)
        sList.addNode(2)
        sList.addNode(5)
        sList.addNode(4)

        print("Original list: ")
        sList.display()

        sList.sortList()

        print("Sorted list: ")
        sList.display()
    if n == 4:
        class Node:

            def __init__(self, data):
                self.data = data
                self.next = None


        class LinkedList:

            def __init__(self):
                self.head = None

            def reverse(self):
                prev = None
                current = self.head
                while (current is not None):
                    next = current.next
                    current.next = prev
                    prev = current
                    current = next
                self.head = prev

            def push(self, new_data):
                new_node = Node(new_data)
                new_node.next = self.head
                self.head = new_node

            def printList(self):
                temp = self.head
                while (temp):
                    print(temp.data)
                    temp = temp.next


        llist = LinkedList()
        llist.push(20)
        llist.push(4)
        llist.push(15)
        llist.push(85)

        print("Given Linked List")
        llist.printList()
        llist.reverse()
        print("\nReversed Linked List")
        llist.printList()
    if n == 5:
        class Node:

            def __init__(self, data):
                self.data = data
                self.next = None


        class LinkedList:

            def __init__(self):
                self.head = None

            def push(self, new_data):
                new_node = Node(new_data)
                new_node.next = self.head
                self.head = new_node

            def deleteNode(self, position):

                # If linked list is empty
                if self.head == None:
                    return

                temp = self.head

                if position == 0:
                    self.head = temp.next
                    temp = None
                    return

                for i in range(position - 1):
                    temp = temp.next
                    if temp is None:
                        break

                if temp is None:
                    return
                if temp.next is None:
                    return

                next = temp.next.next

                temp.next = None

                temp.next = next

            def printList(self):
                temp = self.head
                while (temp):
                    print(" %d " % (temp.data)),
                    temp = temp.next


        llist = LinkedList()
        llist.push(7)
        llist.push(1)
        llist.push(3)
        llist.push(2)
        llist.push(8)

        print("Created Linked List: ")

        llist.printList()
        llist.deleteNode(4)
        print("\nLinked List after Deletion at position 4: ")
        llist.printList()
    if n==6:
        i=6
        if i == 6:
            print("exited")
            exit()
